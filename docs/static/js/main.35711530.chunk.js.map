{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,uBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAQ,OAAMP,GAAN,mBAAqBO,OAC5CN,EAAc,MAMlB,UACI,6BAAKD,IACL,uBACIQ,KAAK,OACLC,MAAQT,EACRU,SApBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,c,+BCPnBG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWR,GAF/C,+DAGKS,MAAMF,GAHX,cAGbG,EAHa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAA0B,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEtC,OADAc,QAAQC,IAAI,CAAEN,KAAIC,QAAOV,QAErB,sBAAKgB,UAAU,0CAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAMR,IACrB,4BAAKA,QCHJS,EAAU,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAC1B,MAA0BR,mBAAS,CAC/BoB,KAAK,GACLe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAEPzB,EAASL,GACJ+B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAItB,CAAC3B,IAEG4B,EDf2BK,CAAcjC,GAAlCkB,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAItB,OACI,qCACI,oBAAIJ,UAAU,qCAAd,SAAoDvB,IAClD2B,GAAW,mBAAGJ,UAAU,oCAAb,qBACb,qBAAKA,UAAU,YAAf,SACKL,EAAOJ,KAAK,SAACC,GAAD,OACT,cAAC,EAAD,eAESA,GADAA,EAAIC,aEYlBkB,EAxBM,WAEjB,MAAoC1C,mBAAS,CAAC,aAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ4C,EAAWrB,KAAK,SAAAd,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCdjCoC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.35711530.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value )\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ){\n            setCategories( category => [ inputValue, ...category ]);\n            setInputValue('')\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <h1>{inputValue}</h1>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n","\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=6clfOGQ9ghL0x1oD9F4qnOrnEkybyNkk`;\n    const respuesta = await fetch(url);\n    const { data } = await respuesta.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n    console.log({ id, title, url });\n    return (\n        <div className=\"card animate__animated animate__fadeIn \">\n            <img src={url} alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs( category );\n\n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn \">{category}</h3>\n            { loading && <p className=\"animate__animated animate__flash \">Loading</p> }\n            <div className=\"card-grid\">\n                {images.map( (img) => (\n                    <GifGridItem \n                        key={img.id} \n                        { ...img }\n                    />\n                ))}\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data:[],\n        loading: true,\n    });\n    \n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false,\n                })\n            });\n\n    }, [category])\n\n    return state; // { data: [], loading: true };\n}","\nimport React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Haikyuu!']);\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n\n            <ol>\n                { \n                    categories.map( category => (\n                        <GifGrid \n                            key={category}\n                            category={category} \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}